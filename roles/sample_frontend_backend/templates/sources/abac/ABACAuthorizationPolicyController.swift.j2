import Vapor
import Foundation
import ABACAuthorization
import DNSClient

struct ABACAuthorizationPolicyController: RouteCollection {
    
    let accessDataRepo: AccessDataRepo
    
    
    func boot(routes: RoutesBuilder) throws {
        // API
        let bearerAuthenticator = UserModelBearerAuthenticator()
        let guardMiddleware = UserModel.guardMiddleware()
        let abacMiddleware = ABACMiddleware<AccessData>(accessDataRepo: accessDataRepo, protectedResources: APIResource._allProtected)
        
        let mainRoute = routes.grouped("\(APIResource._apiEntry)", "\(APIResource.Resource.abacAuthPolicies.rawValue)")
        let bulkRoute = routes.grouped("\(APIResource._apiEntry)", "\(APIResource.Resource.bulk.rawValue)", "\(APIResource.Resource.abacAuthPolicies.rawValue)")
        
        let gaGroup = mainRoute.grouped(bearerAuthenticator, guardMiddleware, abacMiddleware)
        let gaGroupBulk = bulkRoute.grouped(bearerAuthenticator, guardMiddleware, abacMiddleware)
        
        gaGroup.get(use: apiGetAll)
        gaGroup.get(":policyId", use: apiGet)
        gaGroup.post(use: apiCreate)
        gaGroup.put(":policyId", use: apiUpdate)
        gaGroup.delete(":policyId", use: apiDelete)
        // Relations
        gaGroup.get(":policyId", "\(APIResource.Resource.abacConditions.rawValue)", use: apiGetAllRelatedConditions)
        // Re-create in-memory policies
        gaGroup.put("\(APIResource.Resource.abacAuthPoliciesService.rawValue)", use: _recreateAllInMemoryPolicies)
        // Bulk
        gaGroupBulk.post(use: apiCreateBulk)
        
        
        // FRONTEND
        let authorizationPolicyRoute = routes.grouped("authorization-policies")
        let authGroup = authorizationPolicyRoute.grouped(UserAuthSessionsMiddleware(apiUrl: APIConnection.url, redirectPath: "/login"))
        
        authGroup.get(use: overview)
        authGroup.get("create", use: create)
        authGroup.post("create", use: createPost)
        
        authGroup.post("update", use: updatePost)
        authGroup.post("update", "confirm", use: updateConfirmPost)
        
        authGroup.post("delete", use: deletePost)
        authGroup.post("delete", "confirm", use: deleteConfirmPost)
        
        // Relations
        authGroup.get("condition-value", "create", use: createCondition)
        authGroup.post("condition-value", "create", use: createConditionPost)
        authGroup.post("condition-value", "update", use: updateConditionPost)
        authGroup.post("condition-value", "update", "confirm", use: updateConditionConfirmPost)
        authGroup.post("condition-value", "delete", use: deleteConditionPost)
        authGroup.post("condition-value", "delete", "confirm", use: deleteConditionConfirmPost)
    }
    
    
    
    
    
    
    // MARK: - API
    
    func apiGetAll(_ req: Request) async throws -> [ABACAuthorizationPolicy] {
        let policies = try await req.abacAuthorizationRepo.getAllWithConditions()
        return policies.map { policy -> ABACAuthorizationPolicy in
            let abacConditions = policy.conditions.map { $0.convertToABACCondition() }
            return ABACAuthorizationPolicy(id: policy.id,
                                           roleName: policy.roleName,
                                           actionKey: policy.actionKey,
                                           actionValue: policy.actionValue,
                                           conditions: abacConditions)
        }
    }
    
    
    func apiGet(_ req: Request) async throws -> ABACAuthorizationPolicy {
        guard let policyId = req.parameters.get("policyId", as: ABACAuthorizationPolicyModel.IDValue.self) else {
            throw Abort(.badRequest)
        }
        guard let policy = try await req.abacAuthorizationRepo.getWithConditions(policyId) else {
            throw Abort(.badRequest)
        }
        var converted = policy.convertToABACAuthorizationPolicy()
        converted.conditions = policy.conditions.map { $0.convertToABACCondition() }
        return converted
    }
    
    
    func apiCreate(_ req: Request) async throws -> ABACAuthorizationPolicy {
        let content = try req.content.decode(ABACAuthorizationPolicy.self)
        
        let policy = content.convertToABACAuthorizationPolicyModel()
        try await req.abacAuthorizationRepo.save(policy)
        return policy.convertToABACAuthorizationPolicy()
    }
    
    
    func apiUpdate(_ req: Request) async throws -> ABACAuthorizationPolicy {
        guard let policyId = req.parameters.get("policyId", as: ABACAuthorizationPolicyModel.IDValue.self) else {
            throw Abort(.badRequest)
        }
        let updatedAuthPolicy = try req.content.decode(ABACAuthorizationPolicy.self)
        guard let policy = try await req.abacAuthorizationRepo.getWithConditions(policyId) else {
            throw Abort(.badRequest)
        }
        try await req.abacAuthorizationRepo.update(policy, updatedPolicy: updatedAuthPolicy)//.map {
        var converted = policy.convertToABACAuthorizationPolicy()
        converted.conditions = policy.conditions.map { $0.convertToABACCondition() }
        return converted
    }
    
    
    func apiDelete(_ req: Request) async throws -> HTTPStatus {
        guard let policyId = req.parameters.get("policyId", as: ABACAuthorizationPolicyModel.IDValue.self) else {
            throw Abort(.badRequest)
        }
        // Fetch model to call delete on model because of
        // https://github.com/vapor/fluent/issues/704
        guard let policy = try await req.abacAuthorizationRepo.get(policyId) else {
            throw Abort(.noContent)
        }
        try await req.abacAuthorizationRepo.delete(policy)
        return .noContent
    }
    
    
    
    // MARK: Relations
    
    func apiGetAllRelatedConditions(_ req: Request) async throws -> [ABACCondition] {
        guard let policyId = req.parameters.get("policyId", as: ABACAuthorizationPolicyModel.IDValue.self) else {
            throw Abort(.badRequest)
        }
        guard let policy = try await req.abacAuthorizationRepo.getWithConditions(policyId) else {
            throw Abort(.badRequest)
        }
        return policy.conditions.map { $0.convertToABACCondition() }
    }
    
    
    
    // MARK: ABACAuthorizationPolicyService
    
    func _recreateAllInMemoryPolicies(_ req: Request) async throws -> HTTPStatus {
        if let address = req.query[String.self, at: "\(APIResource.UrlQuery.address.rawValue)"] {
            return try await triggerRecreationForAllInstances(req, address: address)
        } else {
            let policies = try await req.abacAuthorizationRepo.getAllWithConditions()
            // flush all current policies before recreating
            req.abacAuthorizationPolicyService.removeAllFromInMemoryCollection()
            for policy in policies {
                try req.abacAuthorizationPolicyService.addToInMemoryCollection(policy: policy, conditions: policy.conditions)
            }
            return .noContent
        }
    }
    
    struct DNSClientKey: StorageKey {
        typealias Value = DNSClient
    }
    
    private func triggerRecreationForAllInstances(_ req: Request, address: String) async throws -> HTTPStatus {
        
        let client = try await DNSClient.connect(on: req.eventLoop).get()
        req.storage.set(DNSClientKey.self, to: client)
        let records = try await client.sendQuery(forHost: address, type: .a).get()
        
        // reset system-bot password and cache it
        let random = [UInt8].random(count: SystemBotUserMigration.Constant.passwordLength).base64
        let password = try? Bcrypt.hash(random)
        guard let hashedPassword = password else {
            throw Abort(.internalServerError)
        }
        guard let botUser = try await req.userRepo.get(byEmail: SystemBotUserMigration.Constant.email) else {
            throw Abort(.internalServerError)
        }
        botUser.password = hashedPassword
        try await req.userRepo.save(botUser)
        let headers = try await login(req, user: botUser, password: random)
        return try await send(req, onRecords: records, headers: headers)
    }
    
    private func login(_ req: Request, user: UserModel, password: String) async throws -> HTTPHeaders {
        let authUri = "\(APIConnection.apiBaseURL)/\(APIResource.Resource.auth.rawValue)/"
        var headers: HTTPHeaders = .init()
        let credentials = BasicAuthorization(username: user.email, password: password)
        var basicHeaders = HTTPHeaders()
        basicHeaders.basicAuthorization = credentials
        
        var apiTokens: TokensResponse? = nil
        let res = try await req.client.post(URI(string: authUri), headers: basicHeaders)
        apiTokens = try res.content.decode(TokensResponse.self)
        headers.add(name: .authorization, value: "Bearer \(apiTokens!.accessData.token)")
        return headers
    }
    
    private func send(_ req: Request, onRecords records: Message, headers: HTTPHeaders) async throws -> HTTPStatus {
        await withThrowingTaskGroup(of: Void.self) { taskGroup in
            for record in records.answers {
                switch record {
                case .a(let resourceRecord):
                    taskGroup.addTask {
                        _ = try await req.client.put(URI(string:"http://\(resourceRecord.resource.stringAddress):\(APIConnection.port)/\(APIResource._apiEntry)/\(APIResource.Resource.abacAuthPolicies.rawValue)/\(APIResource.Resource.abacAuthPoliciesService.rawValue)"), headers: headers)
                    }
                default:
                    continue // do nothing
                }
            }
        }
        return .noContent
    }
    
    
    
    // MARK: Bulk
     
    func apiCreateBulk(_ req: Request) async throws -> [ABACAuthorizationPolicy] {
        let authPolicies = try req.content.decode([ABACAuthorizationPolicy].self).map { policy in
            policy.convertToABACAuthorizationPolicyModel()
        }
        try await req.abacAuthorizationRepo.saveBulk(authPolicies)
        let policies = try await req.abacAuthorizationRepo.getAllWithConditions()
        return policies.map { $0.convertToABACAuthorizationPolicy() }
    }
    
    
    
    
    
    
    // MARK: - FRONTEND
    
    // MARK: Model Handler
    
    // MARK: Read
    
    func overview(_ req: Request) async throws -> View {
        let auth = AuthManager(req: req)
        let uri = URI(string: "\(APIConnection.apiBaseURL)/\(APIResource._apiEntry)/\(APIResource.Resource.abacAuthPolicies.rawValue)")
        let response = try await req.client.get(uri) { clientReq in
            if let token = auth.accessToken {
                clientReq.headers.bearerAuthorization = BearerAuthorization(token: token)
            }
        }
        try response.checkHttpGet(auth)
        let responseDecoded = try response.content.decode([ABACAuthorizationPolicy].self)
        let context = AuthorizationPolicyOverviewContext(
            title: "Authorization Policies",
            createAuthPolicyURI: "/authorization-policies/create",
            content: responseDecoded,
            formActionUpdate: "/authorization-policies/update",
            formActionDelete: "/authorization-policies/delete",
            error: req.query[String.self, at: "error"])
        return try await req.view.render("authPolicy/authorizationPolicies", context)
    }
    
    
    
    // MARK: Create
    
    func create(_ req: Request) async throws -> View {
        let auth = AuthManager(req: req)
        let uri = URI(string: "\(APIConnection.apiBaseURL)/\(APIResource._apiEntry)/\(APIResource.Resource.roles.rawValue)")
        let response = try await req.client.get(uri) { clientReq in
            if let token = auth.accessToken {
                clientReq.headers.bearerAuthorization = BearerAuthorization(token: token)
            }
        }
        try response.checkHttpGet(auth)
        let responseDecoded = try response.content.decode([Role].self)
        let roleNames = responseDecoded.map { $0.name }
        let actions = ABACAPIAction.allCases.map { "\($0)" }
        let resources = APIResource._allProtected
        
        let context = CreateAuthorizationPolicyContext(
            title: "Create Authorization Policy",
            roleNames: roleNames,
            actions: actions,
            resources: resources,
            error: req.query[String.self, at: "error"])
        return try await req.view.render("authPolicy/authorizationPolicy", context)
    }
    
    func createPost(_ req: Request) async throws -> Response {
        let authPolicy = try req.content.decode(ABACAuthorizationPolicy.self)
        let auth = AuthManager(req: req)
        let uri = URI(string: "\(APIConnection.apiBaseURL)/\(APIResource._apiEntry)/\(APIResource.Resource.abacAuthPolicies.rawValue)")
        let response = try await req.client.post(uri) { clientReq in
            if let token = auth.accessToken {
                clientReq.headers.bearerAuthorization = BearerAuthorization(token: token)
            }
            try clientReq.content.encode(authPolicy, as: .json)
        }
        do {
            try response.checkHttpPutPostPatch()
            return req.redirect(to: "/authorization-policies")
        } catch {
            let errorMessage = error.getStatusAndMessage()
            return req.redirect(to: "/authorization-policies/create?error=\(errorMessage.message)")
        }
    }
    
    
    
    // MARK: Update
    
    func updatePost(_ req: Request) async throws -> View {
        let policy = try req.content.decode(ABACAuthorizationPolicy.self)
        guard let policyId = policy.id else {
            throw Abort(.internalServerError)
        }
        
        let auth = AuthManager(req: req)
        guard let token = auth.accessToken else { throw Abort(.unauthorized, reason: "Invalid token") }
        let roleUri = URI(string: "\(APIConnection.apiBaseURL)/\(APIResource._apiEntry)/\(APIResource.Resource.roles.rawValue)")
        let authorizationPolicyUri = URI(string: "\(APIConnection.apiBaseURL)/\(APIResource._apiEntry)/\(APIResource.Resource.abacAuthPolicies.rawValue)/\(policyId)")
        async let roleRequest = req.client.get(roleUri) { $0.headers.bearerAuthorization = BearerAuthorization(token: token) }
        async let authorizationPolicyRequest = req.client.get(authorizationPolicyUri) { $0.headers.bearerAuthorization = BearerAuthorization(token: token) }
        let roleResponse = try await roleRequest
        let authorizationPolicyResponse = try await authorizationPolicyRequest
        try roleResponse.checkHttpGet(auth)
        try authorizationPolicyResponse.checkHttpGet(auth)
        let roleResponseDecoded = try roleResponse.content.decode([Role].self)
        let authorizationPolicyResponseDecoded = try authorizationPolicyResponse.content.decode(ABACAuthorizationPolicy.self)
        
        let roleNames = roleResponseDecoded.map{ $0.name }
        let actions = ABACAPIAction.allCases.map{ "\($0)" }
        let resources = APIResource.Resource.allCases.map{ $0.rawValue }
        
        let actionOnResourceKey = try self.splitActionOnResource(fromKey: policy.actionKey, allActions: actions, allResources: resources)
            
        let context = UpdateAuthorizationPolicyContext(
            title: "Update Authorization Policy",
            titleConditions: "Update Condition Values",
            roleNames: roleNames,
            actions: actions,
            resources: resources,
            selectedAction: actionOnResourceKey.selectedAction,
            selectedResource: actionOnResourceKey.selectedResource,
            authPolicy: authorizationPolicyResponseDecoded,
            formActionAuthPolicy: "update/confirm",
            createConditionURI: "condition-value/create?auth-policy-id=\(policyId)",
            formActionConditionUpdate: "condition-value/update",
            formActionConditionDelete: "condition-value/delete")
        return try await req.view.render("authPolicy/authorizationPolicy", context)
    }
    
    
    func updateConfirmPost(_ req: Request) async throws -> Response {
        let authPolicy = try req.content.decode(ABACAuthorizationPolicy.self)
        guard let uuid = authPolicy.id?.uuidString else {
            return req.redirect(to: "/authorization-policies?error=Update failed: UUID corrupt")
        }
        let auth = AuthManager(req: req)
        let uri = URI(string: "\(APIConnection.apiBaseURL)/\(APIResource._apiEntry)/\(APIResource.Resource.abacAuthPolicies.rawValue)/\(uuid)")
        let response = try await req.client.put(uri) { clientReq in
            if let token = auth.accessToken {
                clientReq.headers.bearerAuthorization = BearerAuthorization(token: token)
            }
            try clientReq.content.encode(authPolicy, as: .json)
        }
        do {
            try response.checkHttpPutPostPatch()
            return req.redirect(to: "/authorization-policies")
        } catch {
            let errorMessage = error.getStatusAndMessage()
            return req.redirect(to: "/authorization-policies?error=\(errorMessage.message)")
        }
    }
    
    
    
    // MARK: Delete
    
    func deletePost(_ req: Request) async throws -> View {
        let policy = try req.content.decode(ABACAuthorizationPolicy.self)
        let roleName = policy.roleName // no need to request the api
        let actions = ABACAPIAction.allCases.map { "\($0)" }
        let resources = APIResource.Resource.allCases.map { $0.rawValue }
        let actionOnResourceKey = try self.splitActionOnResource(fromKey: policy.actionKey, allActions: actions, allResources: resources)
        
        let context = DeleteAuthorizationPolicyContext(
            title: "Delete Authorization Policy",
            titleConditions: "Delete Condition Values",
            roleName: roleName,
            actions: actions,
            resources: resources,
            selectedAction: actionOnResourceKey.selectedAction,
            selectedResource: actionOnResourceKey.selectedResource,
            authPolicy: policy,
            formActionAuthPolicy: "delete/confirm")
        return try await req.view.render("authPolicy/authorizationPolicyDelete", context)
    }
    
    func deleteConfirmPost(_ req: Request) async throws -> Response {
        let authPolicy = try req.content.decode(ABACAuthorizationPolicy.self)
        guard let authPolicyId = authPolicy.id else {
            return req.redirect(to: "/authorization-policies?error=Delete failed: UUID corrupt")
        }
        let auth = AuthManager(req: req)
        let uri = URI(string: "\(APIConnection.apiBaseURL)/\(APIResource._apiEntry)/\(APIResource.Resource.abacAuthPolicies.rawValue)/\(authPolicyId)")
        let response = try await req.client.delete(uri) { clientReq in
            if let token = auth.accessToken {
                clientReq.headers.bearerAuthorization = BearerAuthorization(token: token)
            }
        }
        do {
            try response.checkHttpDeleteLogout()
            return req.redirect(to: "/authorization-policies")
        } catch {
            let errorMessage = error.getStatusAndMessage()
            return req.redirect(to: "/authorization-policies?error=\(errorMessage.message)")
        }
    }
    
    
    
    
    
    
    // MARK: Relations Handler
    
    // MARK: Create
    
    func createCondition(_ req: Request) async throws -> View {
        guard let authPolicyUUID = req.query[UUID.self, at: "auth-policy-id"] else {
            throw Abort(HTTPResponseStatus.badRequest)
        }
        let conditionValueTypes = ABACConditionModel.ConditionValueType.allCases.map { $0.rawValue }
        let conditionOperationTypes = ABACConditionModel.ConditionOperationType.allCases.map { $0.rawValue }
        let conditionTypes = ABACConditionModel.ConditionType.allCases.map { $0.rawValue }
        
        let context = CreateABACConditionContext(
            title: "Create Condition Value",
            authPolicyId: authPolicyUUID,
            possibleTypes: conditionValueTypes,
            possibleOperations: conditionOperationTypes,
            possibleLhsRhsTypes: conditionTypes,
            error: req.query[String.self, at: "error"])
        return try await req.view.render("authPolicy/conditionValue", context)
    }
    
    func createConditionPost(_ req: Request) async throws -> Response {
        let condition = try req.content.decode(ABACCondition.self)
        let auth = AuthManager(req: req)
        let uri = URI(string: "\(APIConnection.apiBaseURL)/\(APIResource._apiEntry)/\(APIResource.Resource.abacConditions.rawValue)")
        let response = try await req.client.post(uri) { clientReq in
            if let token = auth.accessToken {
                clientReq.headers.bearerAuthorization = BearerAuthorization(token: token)
            }
            try clientReq.content.encode(condition, as: .json)
        }
        do {
            try response.checkHttpPutPostPatch()
            return req.redirect(to: "/authorization-policies")
        } catch {
            let errorMessage = error.getStatusAndMessage()
            return req.redirect(to: "/authorization-policies/create?error=\(errorMessage.message)")
        }
    }
    
    // MARK: Update
    
    func updateConditionPost(_ req: Request) async throws -> View {
        let condition = try req.content.decode(ABACCondition.self)
        let conditionValueTypes = ABACConditionModel.ConditionValueType.allCases.map { $0.rawValue }
        let conditionOperationTypes = ABACConditionModel.ConditionOperationType.allCases.map { $0.rawValue }
        let conditionLhsRhsTypes = ABACConditionModel.ConditionType.allCases.map { $0.rawValue }
        let context = UpdateABACConditionContext(
            title: "Update Condition Value",
            abacCondition: condition,
            possibleTypes: conditionValueTypes,
            possibleOperations: conditionOperationTypes,
            possibleLhsRhsTypes: conditionLhsRhsTypes,
            formActionConditionValue: "update/confirm")
        return try await req.view.render("authPolicy/conditionValue", context)
    }
    
    func updateConditionConfirmPost(_ req: Request) async throws -> Response {
        let condition = try req.content.decode(ABACCondition.self)
        guard let uuid = condition.id?.uuidString else {
            return req.redirect(to: "/authorization-policies?error=Update failed: UUID corrupt")
        }
        let auth = AuthManager(req: req)
        let uri = URI(string: "\(APIConnection.apiBaseURL)/\(APIResource._apiEntry)/\(APIResource.Resource.abacConditions.rawValue)/\(uuid)")
        let response = try await req.client.put(uri) { clientReq in
            if let token = auth.accessToken {
                clientReq.headers.bearerAuthorization = BearerAuthorization(token: token)
            }
            try clientReq.content.encode(condition, as: .json)
        }
        do {
            try response.checkHttpPutPostPatch()
            return req.redirect(to: "/authorization-policies")
        } catch {
            let errorMessage = error.getStatusAndMessage()
            return req.redirect(to: "/authorization-policies?error=\(errorMessage.message)")
        }
    }
    
    // MARK: Delete
    
    func deleteConditionPost(_ req: Request) async throws -> View {
        let condition = try req.content.decode(ABACCondition.self)
        let conditionValueTypes = [condition.type.rawValue]
        let conditionOperationTypes = [condition.operation.rawValue]
        let conditionLhsRhsTypes = [condition.lhsType.rawValue, condition.rhsType.rawValue]
        let context = UpdateABACConditionContext(
            title: "Delete Condition Value",
            abacCondition: condition,
            possibleTypes: conditionValueTypes,
            possibleOperations: conditionOperationTypes,
            possibleLhsRhsTypes: conditionLhsRhsTypes,
            formActionConditionValue: "delete/confirm")
        return try await req.view.render("authPolicy/conditionValueDelete", context)
    }
    
    func deleteConditionConfirmPost(_ req: Request) async throws -> Response {
        let condition = try req.content.decode(ABACCondition.self)
        guard let uuid = condition.id?.uuidString else {
            return req.redirect(to: "/authorization-policies?error=Delete failed: UUID corrupt")
        }
        let auth = AuthManager(req: req)
        let uri = URI(string: "\(APIConnection.apiBaseURL)/\(APIResource._apiEntry)/\(APIResource.Resource.abacConditions.rawValue)/\(uuid)")
        let response = try await req.client.delete(uri) { clientReq in
            if let token = auth.accessToken {
                clientReq.headers.bearerAuthorization = BearerAuthorization(token: token)
            }
        }
        do {
            try response.checkHttpDeleteLogout()
            return req.redirect(to: "/authorization-policies")
        } catch {
            let errorMessage = error.getStatusAndMessage()
            return req.redirect(to: "/authorization-policies?error=\(errorMessage.message)")
        }
    }
    
}


// MARK: - Private helper methods

extension ABACAuthorizationPolicyController {
    private func splitActionOnResource(fromKey policyKey: String, allActions actions: [String], allResources resources: [String]) throws -> (selectedAction: String, selectedResource: String) {
        
        var selectedAction: String?
        for action in actions {
            if policyKey.hasPrefix(action) {
                selectedAction = action
                break
            }
        }
        var selectedResource: String?
        for resource in resources {
            if policyKey.hasSuffix(resource) {
                selectedResource = resource
                break
            }
        }
        
        guard let resource = selectedResource, let action = selectedAction else {
            throw Abort(.internalServerError)
        }
        return (action, resource)
    }
}






struct AuthorizationPolicyOverviewContext: Encodable {
    let title: String
    let createAuthPolicyURI: String
    let content: [ABACAuthorizationPolicy]
    let formActionUpdate: String?
    let formActionDelete: String?
    let error: String?
}

struct CreateAuthorizationPolicyContext: Encodable {
    let title: String
    let roleNames: [String]
    let actions: [String]
    let resources: [String]
    let error: String?
}

struct UpdateAuthorizationPolicyContext: Encodable {
    let title: String
    let titleConditions: String
    let roleNames: [String]
    let actions: [String]
    let resources: [String]
    
    let selectedAction: String
    let selectedResource: String
    let authPolicy: ABACAuthorizationPolicy
    
    let formActionAuthPolicy: String?
    let createConditionURI: String
    let formActionConditionUpdate: String?
    let formActionConditionDelete: String?
    let editing = true
}

struct DeleteAuthorizationPolicyContext: Encodable {
    let title: String
    let titleConditions: String
    let roleName: String
    let actions: [String]
    let resources: [String]
    
    let selectedAction: String
    let selectedResource: String
    let authPolicy: ABACAuthorizationPolicy
    
    let formActionAuthPolicy: String?
}



struct CreateABACConditionContext: Encodable {
    let title: String
    let authPolicyId: UUID
    
    let possibleTypes: [String]
    let possibleOperations: [String]
    let possibleLhsRhsTypes: [String]
    
    let error: String?
}

struct UpdateABACConditionContext: Encodable {
    let title: String
    let abacCondition: ABACCondition
    
    let possibleTypes: [String]
    let possibleOperations: [String]
    let possibleLhsRhsTypes: [String]
    
    let formActionConditionValue: String?
    let editing = true
}
